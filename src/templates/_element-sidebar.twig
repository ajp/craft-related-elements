<fieldset class="related-elements-sidebar">
  <legend class="h6">Related elements</legend>
  <div class="meta">
    {% if hasResults %}
      {% set totalElements = 0 %}

      {# Count outgoing elements #}
      {% for key, section in outgoingRelatedElements %}
        {% if section|length %}
          {% set totalElements = totalElements + section|length %}
        {% endif %}
      {% endfor %}

      {# Count incoming elements #}
      {% for key, section in incomingRelatedElements %}
        {% if section|length %}
          {% set totalElements = totalElements + section|length %}
        {% endif %}
      {% endfor %}

      {# Count nested elements #}
      {% for fieldKey, field in nestedRelatedElements %}
        {% for key, section in field %}
          {% if section|length %}
            {% set totalElements = totalElements + section|length %}
          {% endif %}
        {% endfor %}
      {% endfor %}

      {% set elementIndex = 0 %}

      {# Display outgoing relationships (elements this entry references) #}
      {% set hasOutgoingElements = false %}
      {% for key, section in outgoingRelatedElements %}
        {% if section|length %}
          {% set hasOutgoingElements = true %}
        {% endif %}
      {% endfor %}

      {# Check if there are nested elements #}
      {% set hasNestedElements = false %}
      {% for fieldKey, field in nestedRelatedElements %}
        {% for section in field %}
          {% if section|length %}
            {% set hasNestedElements = true %}
          {% endif %}
        {% endfor %}
      {% endfor %}

      {% if hasOutgoingElements or hasNestedElements %}
        <div class="field relationship-section-header" style="padding-block: 8px; padding-inline: var(--m) var(--s); background-color: var(--gray-050); border-radius: 4px; margin-bottom: 4px;">
          <div class="flex flex-nowrap gap-s items-center">
            <strong style="font-size: 12px; color: var(--gray-700);">References</strong>
            <div style="position: relative; display: inline-block;">
              <button type="button" class="info-icon-btn" style="background: none; border: none; padding: 2px; cursor: pointer; display: flex; align-items: center;" title="Show info">
                <span class="cp-icon small" style="color: var(--gray-500);">
                  {{ iconSvg('info') }}
                </span>
              </button>
              <div class="info-tooltip" style="display: none; position: absolute; background: var(--gray-900); color: white; padding: 8px 12px; border-radius: 4px; font-size: 11px; z-index: 1000; white-space: nowrap; top: 100%; left: 50%; transform: translateX(-50%); margin-top: 4px;">
                Elements this {{ elementType }} links to
                <div style="position: absolute; top: -4px; left: 50%; transform: translateX(-50%); width: 0; height: 0; border-left: 4px solid transparent; border-right: 4px solid transparent; border-bottom: 4px solid var(--gray-900);"></div>
              </div>
            </div>
          </div>
        </div>

        {# Display direct outgoing relationships #}
        {% for key, section in outgoingRelatedElements %}
          {% if section|length %}
            {% for element in section %}
              {% set elementIndex = elementIndex + 1 %}
              <div class="field related-element-item outgoing-element" data-index="{{ elementIndex - 1 }}" style="padding-block: 12px; padding-inline: var(--m) var(--s);">
                <div class="flex flex-nowrap gap-s" style="padding-left: var(--m);">
                  <a href="{{ element.cpEditUrl ?? '#' }}" class="flex flex-nowrap gap-s">
                    <span class="status small {{ element.status }}" role="img" aria-label="Status: {{ element.status }}" style="margin-inline-end: 0;"></span>
                    <span class="cp-icon small">
                      {% switch key %}
                        {% case 'Entry' %}
                          {{ iconSvg('newspaper') }}
                        {% case 'Category' %}
                          {{ iconSvg('sitemap') }}
                        {% case 'Asset' %}
                          {{ iconSvg('asset') }}
                      {% endswitch %}
                    </span>
                    <span style="word-break: break-word;">
                      {{ element.title ?? element.id }}
                    </span>
                  </a>
                </div>
              </div>
            {% endfor %}
          {% endif %}
        {% endfor %}

        {# Display nested field relationships within References section #}
        {% for fieldKey, field in nestedRelatedElements %}
          {% set hasFieldElements = false %}
          {% for section in field %}
            {% if section|length %}
              {% set hasFieldElements = true %}
            {% endif %}
          {% endfor %}

          {% if hasFieldElements %}
            {% set headerIndex = elementIndex %}
            <div class="field nested-field-header" data-index="{{ headerIndex }}" style="padding-block: 8px; padding-inline: var(--m) var(--s); border-radius: 4px; margin-bottom: 4px; margin-top: 8px;">
              <div class="flex flex-nowrap gap-s items-center" style="padding-left: var(--m);">
                <strong style="font-size: 12px; color: var(--gray-700);">{{ fieldKey }}</strong>
              </div>
            </div>

            {% for key, section in field %}
              {% if section|length %}
                {% for element in section %}
                  {% set elementIndex = elementIndex + 1 %}
                  <div class="field related-element-item nested-element" data-index="{{ elementIndex - 1 }}" data-header="{{ headerIndex }}" style="min-height: 34px; padding-top: 0; padding-bottom: 12px; border-top: none;">
                    <div class="flex flex-nowrap gap-s" style="padding-left: calc(var(--s) * 4);">
                      <span style="position: relative; top: -3px;">âˆŸ</span>
                      <a href="{{ element.cpEditUrl ?? '#' }}" class="flex flex-nowrap gap-s">
                        <span class="status small {{ element.status }}" role="img" aria-label="Status: {{ element.status }}" style="margin-inline-end: 0;"></span>
                        <span class="cp-icon small">
                        {% switch key %}
                        {% case 'Entry' %}
                          {{ iconSvg('newspaper') }}
                        {% case 'Category' %}
                          {{ iconSvg('sitemap') }}
                        {% case 'Asset' %}
                          {{ iconSvg('asset') }}
                        {% endswitch %}
                      </span>
                        <span style="word-break: break-word;">
                        {{ element.title ?? element.id }}
                      </span>
                      </a>
                    </div>
                  </div>
                {% endfor %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}

      {# Display incoming relationships (elements that reference this entry) #}
      {% set hasIncomingElements = false %}
      {% for key, section in incomingRelatedElements %}
        {% if section|length %}
          {% set hasIncomingElements = true %}
        {% endif %}
      {% endfor %}

      {% if hasIncomingElements %}
        {% if hasOutgoingElements or hasNestedElements %}
          <div style="margin-top: 12px;"></div>
        {% endif %}

        <div class="field relationship-section-header" style="padding-block: 8px; padding-inline: var(--m) var(--s); background-color: var(--gray-050); border-radius: 4px; margin-bottom: 4px;">
          <div class="flex flex-nowrap gap-s items-center">
            <strong style="font-size: 12px; color: var(--gray-700);">Referenced by</strong>
            <div style="position: relative; display: inline-block;">
              <button type="button" class="info-icon-btn" style="background: none; border: none; padding: 2px; cursor: pointer; display: flex; align-items: center;" title="Show info">
                <span class="cp-icon small" style="color: var(--gray-500);">
                  {{ iconSvg('info') }}
                </span>
              </button>
              <div class="info-tooltip" style="display: none; position: absolute; background: var(--gray-900); color: white; padding: 8px 12px; border-radius: 4px; font-size: 11px; z-index: 1000; white-space: nowrap; top: 100%; left: 50%; transform: translateX(-50%); margin-top: 4px;">
                Elements that link to this {{ elementType }}
                <div style="position: absolute; top: -4px; left: 50%; transform: translateX(-50%); width: 0; height: 0; border-left: 4px solid transparent; border-right: 4px solid transparent; border-bottom: 4px solid var(--gray-900);"></div>
              </div>
            </div>
          </div>
        </div>

        {% for key, section in incomingRelatedElements %}
          {% if section|length %}
            {% for element in section %}
              {% set elementIndex = elementIndex + 1 %}
                <div class="field related-element-item incoming-element" data-index="{{ elementIndex - 1 }}" style="padding-block: 12px; padding-inline: var(--m) var(--s);">
                  <div class="flex flex-nowrap gap-s" style="padding-left: var(--m);">
                    <a href="{{ element.cpEditUrl ?? '#' }}" class="flex flex-nowrap gap-s">
                      <span class="status small {{ element.status }}" role="img" aria-label="Status: {{ element.status }}" style="margin-inline-end: 0;"></span>
                      <span class="cp-icon small">
                        {% switch key %}
                          {% case 'Entry' %}
                            {{ iconSvg('newspaper') }}
                          {% case 'Category' %}
                            {{ iconSvg('sitemap') }}
                          {% case 'Asset' %}
                            {{ iconSvg('asset') }}
                        {% endswitch %}
                      </span>
                      <span style="word-break: break-word;">
                        {{ element.title ?? element.id }}
                      </span>
                    </a>
                  </div>
              </div>
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}

      {% if totalElements > (initialLimit ?? 10) %}
        <div class="field show-more-container" style="padding-block: 6px; padding-inline: var(--m) var(--s); border-top: none; margin-top: 8px;">
          <button type="button" class="btn small show-more-btn">
            Show {{ totalElements - (initialLimit ?? 10) }} more related elements
          </button>
          <button type="button" class="btn small show-less-btn" style="display: none;">
            Show less
          </button>
        </div>
      {% endif %}
    {% else %}
      <div class="field flex-1">
        <div style="padding-block: 12px; padding-inline: var(--m) var(--s);">
          <p>No related elements found.</p>
        </div>
      </div>
    {% endif %}
  </div>
</fieldset>

<script>
  (function() {
    'use strict';

    const initialLimit = {{ initialLimit ?? 10 }};

    function initializeRelatedElements() {
      const items = document.querySelectorAll('.related-elements-sidebar .related-element-item[data-index]');
      const headers = document.querySelectorAll('.related-elements-sidebar .nested-field-header[data-index], .related-elements-sidebar .relationship-section-header');
      const showMoreBtn = document.querySelector('.related-elements-sidebar .show-more-btn');
      const showLessBtn = document.querySelector('.related-elements-sidebar .show-less-btn');

      // Initialize info icon tooltips
      const infoButtons = document.querySelectorAll('.related-elements-sidebar .info-icon-btn');
      infoButtons.forEach(function(button) {
        const tooltip = button.nextElementSibling;
        let isVisible = false;

        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();

          // Hide all other tooltips
          document.querySelectorAll('.related-elements-sidebar .info-tooltip').forEach(function(otherTooltip) {
            if (otherTooltip !== tooltip) {
              otherTooltip.style.display = 'none';
            }
          });

          // Toggle current tooltip
          isVisible = !isVisible;
          tooltip.style.display = isVisible ? 'block' : 'none';
        });
      });

      // Hide tooltips when clicking outside
      document.addEventListener('click', function(e) {
        if (!e.target.closest('.info-icon-btn') && !e.target.closest('.info-tooltip')) {
          document.querySelectorAll('.related-elements-sidebar .info-tooltip').forEach(function(tooltip) {
            tooltip.style.display = 'none';
          });
        }
      });

      if (items.length <= initialLimit) {
        return;
      }

      function hideElementsAndHeaders() {
        items.forEach(function(item, index) {
          if (index >= initialLimit) {
            item.style.display = 'none';
          }
        });

        // Hide section headers if all their elements are hidden
        const sectionHeaders = document.querySelectorAll('.related-elements-sidebar .relationship-section-header');
        sectionHeaders.forEach(function(header) {
          const nextElements = [];
          let nextSibling = header.nextElementSibling;

          while (nextSibling && !nextSibling.classList.contains('relationship-section-header') && !nextSibling.classList.contains('nested-field-header')) {
            if (nextSibling.classList.contains('related-element-item')) {
              nextElements.push(nextSibling);
            }
            nextSibling = nextSibling.nextElementSibling;
          }

          const hasVisibleElements = nextElements.some(el => el.style.display !== 'none');
          header.style.display = hasVisibleElements ? '' : 'none';
        });

        // Handle nested field headers
        const nestedHeaders = document.querySelectorAll('.related-elements-sidebar .nested-field-header[data-index]');
        nestedHeaders.forEach(function(header) {
          const headerIndex = parseInt(header.getAttribute('data-index'));
          const relatedElements = document.querySelectorAll('.related-element-item[data-header="' + headerIndex + '"]');
          let hasVisibleElements = false;

          relatedElements.forEach(function(element) {
            if (element.style.display !== 'none') {
              hasVisibleElements = true;
            }
          });

          header.style.display = hasVisibleElements ? '' : 'none';
        });
      }

      function showAllElementsAndHeaders() {
        items.forEach(function(item) {
          item.style.display = '';
        });

        headers.forEach(function(header) {
          header.style.display = '';
        });
      }

      hideElementsAndHeaders();

      if (showMoreBtn) {
        showMoreBtn.addEventListener('click', function(e) {
          e.preventDefault();
          showAllElementsAndHeaders();
          showMoreBtn.style.display = 'none';
          if (showLessBtn) {
            showLessBtn.style.display = '';
          }
        });
      }

      if (showLessBtn) {
        showLessBtn.addEventListener('click', function(e) {
          e.preventDefault();
          hideElementsAndHeaders();
          showLessBtn.style.display = 'none';
          if (showMoreBtn) {
            showMoreBtn.style.display = '';
          }
        });
      }
    }

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeRelatedElements);
    } else {
      setTimeout(initializeRelatedElements, 100);
    }
  })();
</script>
